

<div class="user-panel-breadcrumb">
    <div class="row">
        <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12">
            <div class="user-panel-breadcrumb-left">
                <h1>All Generative ARTs</h1>
            </div>
        </div>
    </div>
</div>

<div class="user-store-area">
 
    <div class="row">
        <div class="col-xl-8 col-lg-8 col-md-8 col-sm-12 col-12 offset-xl-2 offset-lg-2 offset-md-2">
            <div class="row">
                @if (Model != null)
                {
                    @foreach (var item in Model)
                    {

                        <div class="col-md-4">
                            <div class="thumbnail">
                                <img src="@(item.Substring(item.IndexOf("wwwroot/") + 7))" />
                                <div class="caption">
                                    <p>...</p>
                                </div>
                            </div>
                        </div>

                    }
                }

            </div>
        </div>
    </div>


</div>





<script>
      //const ipfs = window.IpfsHttpClient("ipfs.infura.io", "5001", {
      //  protocol: "https",
      //});
      //var encode = function (s) {
      //  var out = [];
      //  for (var i = 0; i < s.length; i++) {
      //    out[i] = s.charCodeAt(i);
      //  }
      //  return new Uint8Array(out);
      //};
      //function getIpfsHashAsync(input, obj = null) {
      //  return new Promise((resolve, reject) => {
      //    let reader = new FileReader();

      //    reader.onload = () => {
      //      const magic_array_buffer_converted_to_buffer = buffer.Buffer(
      //        reader.result
      //      ); // honestly as a web developer I do not fully appreciate the difference between buffer and arrayBuffer

      //      resolve(ipfs.add(magic_array_buffer_converted_to_buffer));
      //    };

      //    reader.onerror = reject;

      //    if (input == "") {
      //      var str = JSON.stringify(obj);
      //      var data = encode(str);

      //      var blob = new Blob([data], {
      //        type: "application/octet-stream",
      //      });

      //      reader.readAsArrayBuffer(blob);
      //    } else {
      //      reader.readAsArrayBuffer(document.getElementById(input).files[0]);
      //    }
      //  });
    //}
    file1.onchange = evt => {
        const [file] = file1.files
        if (file) {
            blah.src = URL.createObjectURL(file)
        }
    }

    $(function () {
        
        var $form = $("form:last");
        $form.validate({
            rules: {
                file1: {
                    required: true,
                    //accept: "image/*"
                }
            },
            messages: {
                file1: {
                    //accept: "Please select Image File Only"
                }
            }
        });
        // load navbar and modal
        //$("#app > .navbar").load("navbar-header.html");
        // initialize smart contracts
        //App.initContracts();
      });
</script>
